// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2014 22:14:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    machine_calc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module machine_calc_vlg_sample_tst(
	clk,
	data_in,
	enter,
	reset,
	sampler_tx
);
input  clk;
input [7:0] data_in;
input  enter;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or enter or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module machine_calc_vlg_check_tst (
	out_a,
	out_b,
	out_operand,
	result,
	sampler_rx
);
input [7:0] out_a;
input [7:0] out_b;
input [7:0] out_operand;
input [7:0] result;
input sampler_rx;

reg [7:0] out_a_expected;
reg [7:0] out_b_expected;
reg [7:0] out_operand_expected;
reg [7:0] result_expected;

reg [7:0] out_a_prev;
reg [7:0] out_b_prev;
reg [7:0] out_operand_prev;
reg [7:0] result_prev;

reg [7:0] out_a_expected_prev;
reg [7:0] out_b_expected_prev;
reg [7:0] out_operand_expected_prev;
reg [7:0] result_expected_prev;

reg [7:0] last_out_a_exp;
reg [7:0] last_out_b_exp;
reg [7:0] last_out_operand_exp;
reg [7:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_a_prev = out_a;
	out_b_prev = out_b;
	out_operand_prev = out_operand;
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	out_a_expected_prev = out_a_expected;
	out_b_expected_prev = out_b_expected;
	out_operand_expected_prev = out_operand_expected;
	result_expected_prev = result_expected;
end


// expected out_a[ 7 ]
initial
begin
	out_a_expected[7] = 1'bX;
end 
// expected out_a[ 6 ]
initial
begin
	out_a_expected[6] = 1'bX;
end 
// expected out_a[ 5 ]
initial
begin
	out_a_expected[5] = 1'bX;
end 
// expected out_a[ 4 ]
initial
begin
	out_a_expected[4] = 1'bX;
end 
// expected out_a[ 3 ]
initial
begin
	out_a_expected[3] = 1'bX;
end 
// expected out_a[ 2 ]
initial
begin
	out_a_expected[2] = 1'bX;
end 
// expected out_a[ 1 ]
initial
begin
	out_a_expected[1] = 1'bX;
end 
// expected out_a[ 0 ]
initial
begin
	out_a_expected[0] = 1'bX;
end 
// expected out_b[ 7 ]
initial
begin
	out_b_expected[7] = 1'bX;
end 
// expected out_b[ 6 ]
initial
begin
	out_b_expected[6] = 1'bX;
end 
// expected out_b[ 5 ]
initial
begin
	out_b_expected[5] = 1'bX;
end 
// expected out_b[ 4 ]
initial
begin
	out_b_expected[4] = 1'bX;
end 
// expected out_b[ 3 ]
initial
begin
	out_b_expected[3] = 1'bX;
end 
// expected out_b[ 2 ]
initial
begin
	out_b_expected[2] = 1'bX;
end 
// expected out_b[ 1 ]
initial
begin
	out_b_expected[1] = 1'bX;
end 
// expected out_b[ 0 ]
initial
begin
	out_b_expected[0] = 1'bX;
end 
// expected out_operand[ 7 ]
initial
begin
	out_operand_expected[7] = 1'bX;
end 
// expected out_operand[ 6 ]
initial
begin
	out_operand_expected[6] = 1'bX;
end 
// expected out_operand[ 5 ]
initial
begin
	out_operand_expected[5] = 1'bX;
end 
// expected out_operand[ 4 ]
initial
begin
	out_operand_expected[4] = 1'bX;
end 
// expected out_operand[ 3 ]
initial
begin
	out_operand_expected[3] = 1'bX;
end 
// expected out_operand[ 2 ]
initial
begin
	out_operand_expected[2] = 1'bX;
end 
// expected out_operand[ 1 ]
initial
begin
	out_operand_expected[1] = 1'bX;
end 
// expected out_operand[ 0 ]
initial
begin
	out_operand_expected[0] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(out_a_expected or out_a or out_b_expected or out_b or out_operand_expected or out_operand or result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_a = %b | expected out_b = %b | expected out_operand = %b | expected result = %b | ",out_a_expected_prev,out_b_expected_prev,out_operand_expected_prev,result_expected_prev);
	$display("| real out_a = %b | real out_b = %b | real out_operand = %b | real result = %b | ",out_a_prev,out_b_prev,out_operand_prev,result_prev);
`endif
	if (
		( out_a_expected_prev[0] !== 1'bx ) && ( out_a_prev[0] !== out_a_expected_prev[0] )
		&& ((out_a_expected_prev[0] !== last_out_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[0] = out_a_expected_prev[0];
	end
	if (
		( out_a_expected_prev[1] !== 1'bx ) && ( out_a_prev[1] !== out_a_expected_prev[1] )
		&& ((out_a_expected_prev[1] !== last_out_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[1] = out_a_expected_prev[1];
	end
	if (
		( out_a_expected_prev[2] !== 1'bx ) && ( out_a_prev[2] !== out_a_expected_prev[2] )
		&& ((out_a_expected_prev[2] !== last_out_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[2] = out_a_expected_prev[2];
	end
	if (
		( out_a_expected_prev[3] !== 1'bx ) && ( out_a_prev[3] !== out_a_expected_prev[3] )
		&& ((out_a_expected_prev[3] !== last_out_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[3] = out_a_expected_prev[3];
	end
	if (
		( out_a_expected_prev[4] !== 1'bx ) && ( out_a_prev[4] !== out_a_expected_prev[4] )
		&& ((out_a_expected_prev[4] !== last_out_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[4] = out_a_expected_prev[4];
	end
	if (
		( out_a_expected_prev[5] !== 1'bx ) && ( out_a_prev[5] !== out_a_expected_prev[5] )
		&& ((out_a_expected_prev[5] !== last_out_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[5] = out_a_expected_prev[5];
	end
	if (
		( out_a_expected_prev[6] !== 1'bx ) && ( out_a_prev[6] !== out_a_expected_prev[6] )
		&& ((out_a_expected_prev[6] !== last_out_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[6] = out_a_expected_prev[6];
	end
	if (
		( out_a_expected_prev[7] !== 1'bx ) && ( out_a_prev[7] !== out_a_expected_prev[7] )
		&& ((out_a_expected_prev[7] !== last_out_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_a_expected_prev);
		$display ("     Real value = %b", out_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_a_exp[7] = out_a_expected_prev[7];
	end
	if (
		( out_b_expected_prev[0] !== 1'bx ) && ( out_b_prev[0] !== out_b_expected_prev[0] )
		&& ((out_b_expected_prev[0] !== last_out_b_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[0] = out_b_expected_prev[0];
	end
	if (
		( out_b_expected_prev[1] !== 1'bx ) && ( out_b_prev[1] !== out_b_expected_prev[1] )
		&& ((out_b_expected_prev[1] !== last_out_b_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[1] = out_b_expected_prev[1];
	end
	if (
		( out_b_expected_prev[2] !== 1'bx ) && ( out_b_prev[2] !== out_b_expected_prev[2] )
		&& ((out_b_expected_prev[2] !== last_out_b_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[2] = out_b_expected_prev[2];
	end
	if (
		( out_b_expected_prev[3] !== 1'bx ) && ( out_b_prev[3] !== out_b_expected_prev[3] )
		&& ((out_b_expected_prev[3] !== last_out_b_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[3] = out_b_expected_prev[3];
	end
	if (
		( out_b_expected_prev[4] !== 1'bx ) && ( out_b_prev[4] !== out_b_expected_prev[4] )
		&& ((out_b_expected_prev[4] !== last_out_b_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[4] = out_b_expected_prev[4];
	end
	if (
		( out_b_expected_prev[5] !== 1'bx ) && ( out_b_prev[5] !== out_b_expected_prev[5] )
		&& ((out_b_expected_prev[5] !== last_out_b_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[5] = out_b_expected_prev[5];
	end
	if (
		( out_b_expected_prev[6] !== 1'bx ) && ( out_b_prev[6] !== out_b_expected_prev[6] )
		&& ((out_b_expected_prev[6] !== last_out_b_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[6] = out_b_expected_prev[6];
	end
	if (
		( out_b_expected_prev[7] !== 1'bx ) && ( out_b_prev[7] !== out_b_expected_prev[7] )
		&& ((out_b_expected_prev[7] !== last_out_b_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_b_expected_prev);
		$display ("     Real value = %b", out_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_b_exp[7] = out_b_expected_prev[7];
	end
	if (
		( out_operand_expected_prev[0] !== 1'bx ) && ( out_operand_prev[0] !== out_operand_expected_prev[0] )
		&& ((out_operand_expected_prev[0] !== last_out_operand_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[0] = out_operand_expected_prev[0];
	end
	if (
		( out_operand_expected_prev[1] !== 1'bx ) && ( out_operand_prev[1] !== out_operand_expected_prev[1] )
		&& ((out_operand_expected_prev[1] !== last_out_operand_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[1] = out_operand_expected_prev[1];
	end
	if (
		( out_operand_expected_prev[2] !== 1'bx ) && ( out_operand_prev[2] !== out_operand_expected_prev[2] )
		&& ((out_operand_expected_prev[2] !== last_out_operand_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[2] = out_operand_expected_prev[2];
	end
	if (
		( out_operand_expected_prev[3] !== 1'bx ) && ( out_operand_prev[3] !== out_operand_expected_prev[3] )
		&& ((out_operand_expected_prev[3] !== last_out_operand_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[3] = out_operand_expected_prev[3];
	end
	if (
		( out_operand_expected_prev[4] !== 1'bx ) && ( out_operand_prev[4] !== out_operand_expected_prev[4] )
		&& ((out_operand_expected_prev[4] !== last_out_operand_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[4] = out_operand_expected_prev[4];
	end
	if (
		( out_operand_expected_prev[5] !== 1'bx ) && ( out_operand_prev[5] !== out_operand_expected_prev[5] )
		&& ((out_operand_expected_prev[5] !== last_out_operand_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[5] = out_operand_expected_prev[5];
	end
	if (
		( out_operand_expected_prev[6] !== 1'bx ) && ( out_operand_prev[6] !== out_operand_expected_prev[6] )
		&& ((out_operand_expected_prev[6] !== last_out_operand_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[6] = out_operand_expected_prev[6];
	end
	if (
		( out_operand_expected_prev[7] !== 1'bx ) && ( out_operand_prev[7] !== out_operand_expected_prev[7] )
		&& ((out_operand_expected_prev[7] !== last_out_operand_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_operand[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_operand_expected_prev);
		$display ("     Real value = %b", out_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_operand_exp[7] = out_operand_expected_prev[7];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#32000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module machine_calc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data_in;
reg enter;
reg reset;
// wires                                               
wire [7:0] out_a;
wire [7:0] out_b;
wire [7:0] out_operand;
wire [7:0] result;

wire sampler;                             

// assign statements (if any)                          
machine_calc i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.enter(enter),
	.out_a(out_a),
	.out_b(out_b),
	.out_operand(out_operand),
	.reset(reset),
	.result(result)
);

// clk
initial
begin
	clk = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #2000000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #1500000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #1000000 1'b1;
	data_in[7] = #1500000 1'b0;
	data_in[7] = #1500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #1500000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #2000000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #1500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #1500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #1500000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #500000 1'b1;
	data_in[7] = #1500000 1'b0;
	data_in[7] = #1000000 1'b1;
	data_in[7] = #500000 1'b0;
	data_in[7] = #1000000 1'b1;
	data_in[7] = #2500000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #1500000 1'b0;
	data_in[6] = #2000000 1'b1;
	data_in[6] = #1500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #3000000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #2500000 1'b1;
	data_in[6] = #1000000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #1500000 1'b0;
	data_in[6] = #1000000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #1500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #1000000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
	data_in[6] = #2000000 1'b0;
	data_in[6] = #2500000 1'b1;
	data_in[6] = #500000 1'b0;
	data_in[6] = #500000 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #3000000 1'b0;
	data_in[5] = #2500000 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #1000000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #3000000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #2500000 1'b1;
	data_in[5] = #1000000 1'b0;
	data_in[5] = #1000000 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #1500000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #1500000 1'b1;
	data_in[5] = #1000000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #2500000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #500000 1'b0;
	data_in[5] = #2000000 1'b1;
	data_in[5] = #1000000 1'b0;
	data_in[5] = #500000 1'b1;
	data_in[5] = #500000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #3500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #2000000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #1000000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #1000000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #1000000 1'b1;
	data_in[4] = #1000000 1'b0;
	data_in[4] = #3000000 1'b1;
	data_in[4] = #1000000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #1500000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #1500000 1'b1;
	data_in[4] = #1000000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #500000 1'b0;
	data_in[4] = #500000 1'b1;
	data_in[4] = #1500000 1'b0;
	data_in[4] = #1000000 1'b1;
	data_in[4] = #500000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #1000000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #1500000 1'b0;
	data_in[3] = #1500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #2000000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #1500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #1500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #1000000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #1000000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #1000000 1'b0;
	data_in[3] = #4500000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
	data_in[3] = #2000000 1'b0;
	data_in[3] = #1000000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #1000000 1'b1;
	data_in[3] = #500000 1'b0;
	data_in[3] = #500000 1'b1;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #500000 1'b1;
	data_in[2] = #3000000 1'b0;
	data_in[2] = #2000000 1'b1;
	data_in[2] = #500000 1'b0;
	data_in[2] = #2000000 1'b1;
	data_in[2] = #500000 1'b0;
	data_in[2] = #1500000 1'b1;
	data_in[2] = #1500000 1'b0;
	data_in[2] = #2000000 1'b1;
	data_in[2] = #500000 1'b0;
	data_in[2] = #500000 1'b1;
	data_in[2] = #1000000 1'b0;
	data_in[2] = #1500000 1'b1;
	data_in[2] = #1000000 1'b0;
	data_in[2] = #1000000 1'b1;
	data_in[2] = #500000 1'b0;
	data_in[2] = #1500000 1'b1;
	data_in[2] = #1500000 1'b0;
	data_in[2] = #2000000 1'b1;
	data_in[2] = #500000 1'b0;
	data_in[2] = #1500000 1'b1;
	data_in[2] = #1500000 1'b0;
	data_in[2] = #1000000 1'b1;
	data_in[2] = #1500000 1'b0;
	data_in[2] = #500000 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #1500000 1'b1;
	data_in[1] = #500000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #500000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #500000 1'b0;
	data_in[1] = #2500000 1'b1;
	data_in[1] = #1000000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #1000000 1'b0;
	data_in[1] = #2000000 1'b1;
	data_in[1] = #1000000 1'b0;
	data_in[1] = #1500000 1'b1;
	data_in[1] = #2500000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #1000000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #500000 1'b0;
	data_in[1] = #2000000 1'b1;
	data_in[1] = #500000 1'b0;
	data_in[1] = #500000 1'b1;
	data_in[1] = #1500000 1'b0;
	data_in[1] = #2000000 1'b1;
	data_in[1] = #1500000 1'b0;
	data_in[1] = #1000000 1'b1;
	data_in[1] = #1500000 1'b0;
	data_in[1] = #1000000 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #2000000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #3000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #1500000 1'b0;
	data_in[0] = #1500000 1'b1;
	data_in[0] = #500000 1'b0;
	data_in[0] = #1000000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #1500000 1'b1;
	data_in[0] = #1000000 1'b0;
	data_in[0] = #500000 1'b1;
	data_in[0] = #500000 1'b0;
end 

// enter
initial
begin
	repeat(5)
	begin
		enter = 1'b0;
		enter = #3000000 1'b1;
		# 3000000;
	end
	enter = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

machine_calc_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.enter(enter),
	.reset(reset),
	.sampler_tx(sampler)
);

machine_calc_vlg_check_tst tb_out(
	.out_a(out_a),
	.out_b(out_b),
	.out_operand(out_operand),
	.result(result),
	.sampler_rx(sampler)
);
endmodule

